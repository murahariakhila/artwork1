package com.example.artwork

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ArtworkGallery()
                }
            }
        }

data class Artwork(val image: Painter, val painterName: String)
@Composable
fun ArtworkGallery(viewModel: GalleryViewModel = viewModel()) {
    val artworks = listOf(
            Artwork(painterResource(id = R.drawable.___1), "image 1"),
            Artwork(painterResource(id = R.drawable.___2), "image 2"),
            Artwork(painterResource(id = R.drawable.___3), "image 3"),
            Artwork(painterResource(id = R.drawable.__4), "image 4"),
            Artwork(painterResource(id = R.drawable.__5), "image 5")
        )

    val currentIndex = viewModel.currentIndex

    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Image(
            painter = artworks[currentIndex].image,
            contentDescription = null,
            modifier = Modifier.size(300.dp)
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(text = artworks[currentIndex].painterName, fontSize = 18.sp)
        Spacer(modifier = Modifier.height(16.dp))
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            Button(onClick = { viewModel.previous(artworks.size) }) {
                Text("previous")
            }
            Button(onClick = { viewModel.next(artworks.size) }) {
                Text("Next")
            }
            }
        }
    }
    class GalleryViewModel : ViewModel() {
        var currentIndex by mutableStateOf(0)
            private set
        fun next(size: Int){
            currentIndex = (currentIndex + 1) % size

        }

        fun previous(size: Int){
            currentIndex = if (currentIndex - 1 < 0) size - 1 else currentIndex - 1

        }
    }


    @Preview(showBackground = true)
    @Composable
    fun previewArtworkGallery() {
        ArtworkGallery()
    }

